   单元测试，就是一种为验证单元的正确性而设置的自动化测试，一个单元就是程序中的一个模块化部分。
   一般来说，一个单元通常会与程序中的一个函数或者一个方法相对应，但这并不是必须的。
   程序中的一个部分能否独立地进行测试，是评判这个部分能否被归纳为"单元"的一个重要指标。
   一个单元通常会接受数据作为输入并返回相应的输出，而单元测试用例要做的就是向单元传入数据，然后检查单元产生的输出是否符合预期。


-----

t.Error()  <====>   t.Log() + t.Fail()
t.Errof() <====>    t.Logf() + t.Fail()
t.Fatal() <====>    t.Log() + t.FailNow()
t.Fatalf() <====>   t.Logf() + t.FailNow()

-----
go test
go test -v  -cover     //-v获得更详细的信息  -cover来获知测试用例对代码的覆盖率
go   test   -v   -cover
go  test   -v  -cover   -short    //这种是更灵活的跳过，通过参数-short来开关
go   test  -v     -parallel    3       //以并行的方式运行，同时运行3个测试用例方法，所以最后的执行时间是3s左右，而不是6s左右额。
                                        //-parallel指明并行的测试用例个数，存在默认值的，之所以测试用例可以并行，是因为测试用例中调用了t.Parallel()
go  test   -v   -cover   -short   -bench  .   //-bench表示运行目录下的基准测试文件，点表示所有的基准测试文件。
                                          //BenchmarkDecode-4      	   50000	     35401 ns/op  ===>表示基准测试时候该测试用例被执行了5万次，且每次耗费了35401ns
go test  -run  x -bench  .  //只执行基准测试，因为使用-run参数巧妙的将所有的功能测试用例都忽略了。
                            //标志-run来忽略功能测试。-run标志用于指定需要被执行的功能测试用例，如果用户把一个不存在的功能测试名字用作-run标志的参数，那么所有功能测试都将被忽略。



