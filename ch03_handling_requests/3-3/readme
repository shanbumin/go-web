注意：请务必搞清楚下面的几个概念以及之间的关系，使用方式


1.多路复用器

2.处理器
  a.什么样的类型才能称为处理器

3.处理器函数
  a.什么样的函数才能称为处理器函数

4.处理器函数如何主动转为处理器
	samHandle:=http.HandlerFunc(sam)
	http.Handle("/sam",&samHandle)

5.多路复用器如何绑定处理器
    http.Handle("/sam",&samHandle)

6.多路复用器如何绑定处理器函数
    //http.HandleFunc底层会将处理器函数自动转成处理器的，本质还是绑定处理器的
    http.HandleFunc("/sam",sam)


注意：区分如下这两个函数的区别:handler看成处理器,handle看成动词绑定
http.HandlerFunc()  ===>将处理器函数转为处理器
http.HandleFunc()   ===>将处理器函数绑定到多路复用器上
----------------------------------------------------
总结
1.多路复用器ServeMux结构体:该结构体实现了Handler接口，但也实现了多路复用器接口，即它既是一个处理器同时也是一个多路复用器


2.处理器Handler接口

type Handler interface {
    ServeHTTP(ResponseWriter, *Request)
}

3.多路复用器绑定处理器函数http.Handle
  将自定义的几个处理器绑定到DefaultServeMux , http.Handle函数底层调用的就是DefaultServeMux的方法Handle
http.Handle("/sam", &samHandle)

4.多路复用器绑定处理器函数http.HandleFunc
  绑定自定义的处理器函数到默认的多路复用器上
http.HandleFunc("/hello", hello)

5.处理器函数转处理器函数http.HandlerFunc

samHandle:=http.HandlerFunc(sam)
http.Handle("/sam",&samHandle)
