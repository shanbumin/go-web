一、前端向服务器传递数据的常用编码方式:
a.application/x-www-form-urlencoded (本质与URL编码方式是一样的)
b.multipart/form-data  （本质是MIME报文）
c.text/plain
d.Base64
...
表单传递一般常用的是a和b两种

二、获取表单数据

   前端通过选择的编码方式传递数据之后，我们不需要自己去解码进行分析，http包中提供了一套方法，足够我们用了。(如果是c和d的方式，我们直接读取body即可，压根无需解析的额)
   使用Request结构的方法获取表单数据的一般步骤是：
(1)调用ParseForm方法或者ParseMultipartForm方法，对请求进行语法分析。
(2)根据步骤1调用的方法，访问相应的Form字段、PostForm字段或MultipartForm字段。

三、混淆的方法

r.ParseForm() ===>只能解析URL编码的数据
r.ParseMultipartForm()===>不仅能解析Multipart编码的数据，如果有URL编码的数据，则r.ParseMultipartForm会自行调用r.ParseForm。
总结:第2个更智能，推荐使用它。解析的时候，看的是编码方式，与请求方法是GET/POST/还是PUT没有任何关系。
-------------------------------------------------------
r.Form:上述解析之后，仅仅会将URL编码的数据放置在这里             map[name:[sam rick]  post:[456] thread:[123]]
r.PostForm:上述解析之后，仅仅会将URL编码的且是POST的数据放置在这里              map[name:[sam] post:[456]]
r.MultipartForm:上述解析之后，仅仅会将Multipart编码的数据放置在这里   &{map[post:[456] name:[sam]] map[]}
-----------------------
r.FormValue("hello") :返回key为键查询r.Form字段得到结果[]string切片的第一个值。POST和PUT主体中的同名参数优先于URL查询字符串。
r.PostFormValue("hello"):返回key为键查询r.PostForm字段得到结果[]string切片的第一个值。

FormValue与PostFormValue的好处仅仅就是不需要我们手动进行r.ParseForm()或者r.ParseMultipartForm()，方法内部会智能的自行调用的。
-------------------------
r.FormFile("uploaded")


